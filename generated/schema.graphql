interface BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModel implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModelUUID implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

input BaseWhereInput {
  id_eq: String
  id_in: [String!]
  createdAt_eq: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdById_eq: String
  updatedAt_eq: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedById_eq: String
  deletedAt_all: Boolean
  deletedAt_eq: String
  deletedAt_lt: String
  deletedAt_lte: String
  deletedAt_gt: String
  deletedAt_gte: String
  deletedById_eq: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

interface DeleteResponse {
  id: ID!
}

type MemberRegistered implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  memberId: Int!
  accountId: String!
}

input MemberRegisteredCreateInput {
  memberId: Float!
  accountId: String!
}

enum MemberRegisteredOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  memberId_ASC
  memberId_DESC
  accountId_ASC
  accountId_DESC
}

input MemberRegisteredUpdateInput {
  memberId: Float
  accountId: String
}

input MemberRegisteredWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  memberId_eq: Int
  memberId_gt: Int
  memberId_gte: Int
  memberId_lt: Int
  memberId_lte: Int
  memberId_in: [Int!]
  accountId_eq: String
  accountId_contains: String
  accountId_startsWith: String
  accountId_endsWith: String
  accountId_in: [String!]
}

input MemberRegisteredWhereUniqueInput {
  id: ID!
}

type Mutation {
  createMemberRegistered(data: MemberRegisteredCreateInput!): MemberRegistered!
  createManyMemberRegistereds(data: [MemberRegisteredCreateInput!]!): [MemberRegistered!]!
  updateMemberRegistered(data: MemberRegisteredUpdateInput!, where: MemberRegisteredWhereUniqueInput!): MemberRegistered!
  deleteMemberRegistered(where: MemberRegisteredWhereUniqueInput!): StandardDeleteResponse!
}

type PageInfo {
  limit: Float!
  offset: Float!
  totalCount: Float!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type Query {
  memberRegistereds(offset: Int, limit: Int = 50, where: MemberRegisteredWhereInput, orderBy: MemberRegisteredOrderByInput): [MemberRegistered!]!
  memberRegistered(where: MemberRegisteredWhereUniqueInput!): MemberRegistered!
}

type StandardDeleteResponse {
  id: ID!
}
